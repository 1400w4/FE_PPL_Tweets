import React, { useEffect, useState } from "react";
import axios from "axios";
import { uid } from "uid";
import { app } from "../config";
import { set, ref, getDatabase } from "firebase/database";
import Papa from "papaparse";

const db = getDatabase(app);

const TestPage = ({ dataProcessing }) => {
  const [count, setCount] = useState(dataProcessing.length);
  const [ratioDataTesting, setRatioDataTesting] = useState(30);
  const [ratioDataTraining, setRatioDataTraining] = useState("70");
  const [resultProcess, setResultProcess] = useState([]);
  const [currentPage, setCurrentPage] = useState(1);
  const [totalPages, setTotalPages] = useState(1);
  const [itemsPerPage] = useState(20);
  const [formSubmitted, setFormSubmitted] = useState(false);
  const [file, setFile] = useState(null);
  const [data, setData] = useState([]);
  const [dataReq, setDataReq] = useState([]);
  const [tableRows, setTableRows] = useState([]);
  const [parsedData, setParsedData] = useState([]);
  const [countDataTesting, setCountDataTesting] = useState(0);
  const [countDataTraining, setCountDataTraining] = useState(0);
  const [accuracy, setAccuracy] = useState(0);
  const [precision, setPrecision] = useState(0);
  const [recall, setRecall] = useState(0);
  const [totalData, setTotalData] = useState(0);
  const [tweet, setDatatweet] = useState(0);
  const [testSamples, setTestSamples] = useState(0);
  const [trainSamples, setTrainSamples] = useState(0);

  const addData = (data) => {
    const uuid = uid();
    const newData = {
      accuracy: data.accuracy,
      confusion_matrix: data.confusion_matrix,
      precision: data.precision,
      predictions: data.predictions,
      recall: data.recall,
    };

    set(ref(db, `data/${uuid}`), {
      data: newData,
      uuid: uuid,
    })
      .then(() => {
        console.log("Data added successfully to the database.");
      })
      .catch((error) => {
        console.error("Error adding data to the database:", error);
      });
  };

  const ratio = () => {
    switch (ratioDataTraining) {
      case "70":
        setRatioDataTesting(30);
        break;
      case "80":
        setRatioDataTesting(20);
        break;
      case "90":
        setRatioDataTesting(10);
        break;
      default:
        console.log("error");
    }
  };

  const calculate = () => {
    const dataLength = count;

    switch (ratioDataTraining) {
      case "70":
        setCountDataTraining(Math.ceil((dataLength / 10) * 7));
        setCountDataTesting(Math.ceil((dataLength / 10) * 3));
        break;
      case "80":
        setCountDataTraining(Math.ceil((dataLength / 10) * 8));
        setCountDataTesting(Math.ceil((dataLength / 10) * 2));
        break;
      case "90":
        setCountDataTraining(Math.ceil((dataLength / 10) * 9));
        setCountDataTesting(Math.ceil(dataLength / 10));
        break;
      default:
        console.log("error");
    }
  };

  const handleFileChange = (event) => {
    const file = event.target.files[0];
    Papa.parse(file, {
      header: true,
      skipEmptyLines: true,
      complete: async function (results) {
        const rowsArray = [];
        const valuesArray = [];
        results.data.map((d) => {
          rowsArray.push(Object.keys(d));
          valuesArray.push(Object.values(d));
        });
        setParsedData(results.data);
        setTableRows(rowsArray[0]);
        setData(valuesArray);
        setCount(valuesArray.length);
        setDataReq(results.data);
        console.log(results.data);
      },
    });
  };

  const handleProcessing = async () => {
    try {
      const response = await axios.post("http://127.0.0.1:5000/processing", {
        data: dataReq,
        ratio: ratioDataTraining / 100,
        random_state: count,
      });
      console.log(response.data);

      setAccuracy(response.data.accuracy);
      setTestSamples(response.data.num_test_samples);
      setTrainSamples(response.data.num_train_samples);
      setPrecision(response.data.precision);
      setDatatweet(response.data.predictions);
      setRecall(response.data.recall);
      setTotalData(response.data.totalData);

      setFormSubmitted(true);
      console.log(response.data.predictions);
    } catch (error) {
      console.log(error);
    }
  };

  useEffect(() => {
    ratio();
    calculate();
    console.log(dataProcessing);
  }, [count, ratioDataTraining]);

  const nextPage = () => {
    if (currentPage < totalPages) {
      setCurrentPage(currentPage + 1);
    }
  };

  const previousPage = () => {
    if (currentPage > 1) {
      setCurrentPage(currentPage - 1);
    }
  };

  useEffect(() => {
    const totalPagesCount = Math.ceil(data.length / itemsPerPage);
    setTotalPages(totalPagesCount);

    if (currentPage > totalPagesCount) {
      setCurrentPage(1);
    }
  }, [data, currentPage, itemsPerPage]);

  const startIndex = (currentPage - 1) * itemsPerPage;
  const endIndex = startIndex + itemsPerPage;

  useEffect(() => {
    setCountDataTraining(countDataTraining);
    setCountDataTesting(countDataTesting);
  }, [countDataTraining, countDataTesting]);

  return (
    <>
      <div>
        <div className="title_page">
          <h1>Processing & Validation </h1>
        </div>
        <div className="page_explain">
          <p>
            Menu processing akan membagi jumlah data latih dan data uji menjadi
            rasio 70:30 atau 80:20 dan tujuan dari validasi dalam menu ini
            adalah untuk mengevaluasi dan memvalidasi model atau metode yang
            digunakan dalam analisis sentimen.
          </p>
        </div>
      </div>

      <div>
        <div>
          <input type="file" onChange={handleFileChange} />
          <button onClick={handleProcessing}>Submit</button>
        </div>
        <div>
          <h3>Enter the amount of data</h3>
          <input
            value={count}
            type="number"
            placeholder="Insert Number"
            onChange={(e) => setCount(parseInt(e.target.value))}
          />
        </div>
        <div>
          <h3>Ratio of Data Training : Data Testing</h3>
          <select
            value={ratioDataTraining}
            onChange={(e) => setRatioDataTraining(e.target.value)}
          >
            <option value="70">70</option>
            <option value="80">80</option>
            <option value="90">90</option>
          </select>
          <select
            value={ratioDataTesting}
            onChange={(e) => setRatioDataTesting(parseInt(e.target.value))}
          >
            <option value="30">30</option>
            <option value="20">20</option>
            <option value="10">10</option>
          </select>
        </div>
        <div>
          <h3>Amount of training data and test data to be classified</h3>
          <p>Data Training: {countDataTraining}</p>
          <p>Data Testing: {countDataTesting}</p>
        </div>

        <div>
          <h3>Unused data</h3>
          <p>{data.length - count}</p>{" "}
        </div>
      </div>

      <div class="csv_table">
        <h2>Data CSV</h2>
        <div class="full_table">
          <span>total data: {data.length}</span>
          {data.length !== 0 ? (
            <>
              <table>
                <thead>
                  <tr>
                    <th>No</th>
                    <th scope="col">Tweet Text</th>
                    <th scope="col">Emosi</th>
                    <th scope="col">Label</th>
                  </tr>
                </thead>
                <tbody>
                  {data.slice(startIndex, endIndex).map((item, index) => (
                    <tr key={index + 1}>
                      <td>{startIndex + index + 1}</td>
                      <td>{item[1]}</td>
                      <td>{item[2]}</td>
                      <td>{item[3]}</td>
                    </tr>
                  ))}
                </tbody>
              </table>
              <div class="flexx next_and_prev_btn_container">
                <div>
                  <button onClick={previousPage}>Previous</button>
                </div>
                <div class="total_pages">
                  <span>
                    {currentPage}/{totalPages}
                  </span>
                </div>
                <div>
                  <button onClick={nextPage}>Next</button>
                </div>
              </div>
            </>
          ) : (
            <>
              <table>
                <thead>
                  <tr>
                    <th></th>
                    <th></th>
                    <th></th>
                  </tr>
                </thead>
              </table>
            </>
          )}
        </div>
      </div>
    </>
  );
};

export default TestPage;
